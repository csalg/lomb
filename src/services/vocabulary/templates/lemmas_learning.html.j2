<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Text Analysis</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.8.2/css/bulma.min.css">
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            border: 0;
            padding: 0
        }
        :root {
            --looked-up-bg: hsla(17, 86%, 69%, 0.11);
            --not-looked-up-bg: hsla(209, 86%, 69%, 0.22);
        }
        table {
            width: 100%;
            table-layout: fixed;
        }
        .container {
            display: flex;
            height: 100vh;
            width: 100vw;
            max-width: initial;
        }

        .words {
            overflow-y: scroll;
            width: 40%;
            padding: 1rem 2rem;
        }

        .sidebar {
            /* background-color: red; */
            width: 60%
        }

        .definition {
            /* background-color: aqua; */
            height: 50%;
            width: 100%
        }

        .examples {
            overflow-y: scroll;
            /* background-color: bisque; */
            height: 50%;
            padding: 1rem 2rem;
        }

        .example {
            padding-bottom: 1rem;
        }

        .translation-viewer {
            min-height: 5rem;
            padding: 1rem 0;
            position: sticky;
            top:0;
            background-color: ivory;
        }

        .small_logo {
            display: none;
        }
        .looked-up {
            background-color: var(--looked-up-bg)
        }
        .not-looked-up {
            background-color: var(--not-looked-up-bg);
        }
        .space-under{
            height: 110vh;
        }
    </style>
    </head>
<body>
    <div class="container">
        <div class="words">
            <table>
                <thead>
                    <th>Word</th>
                    <th>Frequency</th>
                    <th>PoR</th>
                </thead>
                <tbody>
                    {% for lemma in lemmas %}
                    <tr data-word="{{lemma.lemma}}" data-examples={{lemma.examples|length}}>
                        <td>{{lemma.lemma}}</td>
                        <td>{{lemma.examples|length}}</td>
                        <td>{{lemma.probability_of_recall|round(3,'floor')}}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        <div class="space-under"></div>
        </div>
        <div class="sidebar">
            <div class="examples">
                <div class="examples-inner">
                </div>
            </div>
            <!-- <div class="definition"> -->
                <iframe class="definition" src=""></iframe>
            <!-- </div> -->
    </div>

    <script>
        const examples = {
            {% for lemma in lemmas%}
            "{{lemma.lemma}}": {{lemma.examples}},
            {% endfor %}
        }

        const URL = "http://192.168.1.41:5000/tracking/"


        const main = () => {
            observer = create_intersection_observer()
            const words_table = document.querySelectorAll('tbody tr')
            words_table.forEach(word_row => {
                var word = word_row.dataset.word
                var examples = word_row.dataset.examples
                observer.observe(word_row);
                word_row.addEventListener('click', e => {
                    get_linguee_iframe(word);
                    populate_examples(word);
                    if (!word_row.classList.contains('looked-up') && !word_row.classList.contains('not-looked-up')){
                        send_tracking_data(word, true, examples);
                        word_row.classList.add('looked-up')
                    }
                    })
            });

        }


        const create_intersection_observer = () => {
            let options = {
                root: null,
                rootMargin: '0px 0px -100%',
                threshold: 0
            }

            return new IntersectionObserver(out_of_view_callback, options);
        }

        let initial_observer_burst_passed = false;
        const out_of_view_callback = (entries) => {
            if (!initial_observer_burst_passed) {
                initial_observer_burst_passed = true;
                return
            }
            if (entries.length > 20){
                return
            }
            entries.forEach((entry) => {
                if (!was_looked_up(entry.target) && !was_not_looked_up(entry.target)){
                    let word = entry.target.dataset.word
                    let examples = entry.target.dataset.examples
                    entry.target.classList.add('not-looked-up')
                    send_tracking_data(word, false, examples);

                }
            })
        }


        const was_looked_up = element => element.classList.contains('looked-up')


        const was_not_looked_up = element => element.classList.contains('not-looked-up')


        const get_linguee_iframe = word => {
            const definition_iframe = document.querySelector('iframe.definition');
            definition_iframe.setAttribute('src', `https://android.linguee.com/german-english/translation/${word}.html`)
        }


        const populate_examples = lemma => {
            const examples_element = document.querySelector('.examples-inner')
            examples_element.innerHTML = ""
            if (lemma in examples) {
                examples_element.appendChild(example_translation_viewer())
                examples[lemma].forEach(example => {
                    examples_element.appendChild(example_view(example))
            });
        }
        }


        const send_tracking_data = (word, was_clicked, examples) => {
            payload = was_clicked ? 'CLICK' : 'NOT_CLICKED'
            dispatch({
                type: 'REVIEW',
                context: [word],
                examples: examples,
                payload: payload
            })
        }


        const example_translation_viewer = () => {
            const translation_viewer = document.createElement('div');
            translation_viewer.setAttribute('class', 'translation-viewer')
            return translation_viewer
        }


        const example_view = example => {
            const view = document.createElement('p');
            view.setAttribute('class', 'example')
            view.innerHTML = example.source_text;
            view.addEventListener('click', e => show_example_translation(example.support_text) )
            return view
        }


        const show_example_translation = text => {
            const translation_viewer = document.querySelector('.translation-viewer');
            translation_viewer.innerHTML = text
        }


        async function dispatch(data){
            console.log(JSON.stringify(data))
            const response = await fetch(URL,
            {
                method: "POST",
                mode: 'cors',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })

            return response
        }

        main()

    </script>

</body>
</html>